#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞ –£–ó–†–ò
"""
import requests
import json
import time
import sys

WEBHOOK_URL = 'http://localhost:8001/api/webhook/usersbox_telegram_bot_secure_webhook_2025'

def send_update(update):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ webhook"""
    try:
        response = requests.post(WEBHOOK_URL, json=update, timeout=10)
        print(f"‚úÖ Status: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_start_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
    print("\nüß™ Testing /start command...")
    
    update = {
        'update_id': 1001,
        'message': {
            'message_id': 1,
            'from': {
                'id': 987654321,
                'is_bot': False,
                'first_name': '–ò–≤–∞–Ω',
                'username': 'test_ivan'
            },
            'chat': {
                'id': 987654321,
                'first_name': '–ò–≤–∞–Ω',
                'username': 'test_ivan',
                'type': 'private'
            },
            'date': 1640995200,
            'text': '/start'
        }
    }
    
    return send_update(update)

def test_menu_callback():
    """–¢–µ—Å—Ç –º–µ–Ω—é callbacks"""
    print("\nüß™ Testing menu callback...")
    
    update = {
        'update_id': 1002,
        'callback_query': {
            'id': 'test_callback_123',
            'from': {
                'id': 987654321,
                'is_bot': False,
                'first_name': '–ò–≤–∞–Ω',
                'username': 'test_ivan'
            },
            'message': {
                'message_id': 2,
                'chat': {
                    'id': 987654321,
                    'type': 'private'
                }
            },
            'data': 'menu_pricing'
        }
    }
    
    return send_update(update)

def test_search_query():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    print("\nüß™ Testing search query...")
    
    update = {
        'update_id': 1003,
        'message': {
            'message_id': 3,
            'from': {
                'id': 987654321,
                'is_bot': False,
                'first_name': '–ò–≤–∞–Ω',
                'username': 'test_ivan'
            },
            'chat': {
                'id': 987654321,
                'first_name': '–ò–≤–∞–Ω',
                'username': 'test_ivan',
                'type': 'private'
            },
            'date': 1640995200,
            'text': '+79123456789'
        }
    }
    
    return send_update(update)

def test_payment_callback():
    """–¢–µ—Å—Ç payment callbacks"""
    print("\nüß™ Testing payment callback...")
    
    update = {
        'update_id': 1004,
        'callback_query': {
            'id': 'test_payment_callback',
            'from': {
                'id': 987654321,
                'is_bot': False,
                'first_name': '–ò–≤–∞–Ω',
                'username': 'test_ivan'
            },
            'message': {
                'message_id': 4,
                'chat': {
                    'id': 987654321,
                    'type': 'private'
                }
            },
            'data': 'pay_stars'
        }
    }
    
    return send_update(update)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –±–æ—Ç–∞ –£–ó–†–ò")
    print("=" * 50)
    
    tests = [
        ("Start Command", test_start_command),
        ("Menu Callback", test_menu_callback),
        ("Search Query", test_search_query),
        ("Payment Callback", test_payment_callback)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} - PASSED")
        else:
            print(f"‚ùå {test_name} - FAILED")
        
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)